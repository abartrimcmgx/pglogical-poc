pglogical_pg_replication:
  query: |
    SELECT
      CASE WHEN NOT pg_is_in_recovery()
        THEN 0
        ELSE GREATEST (0, EXTRACT(EPOCH FROM (now() - pg_last_xact_replay_timestamp()))) END AS lag
  master: true
  metrics:
    - lag:
        usage: "GAUGE"
        description: "Replication lag behind leader in seconds"

pglogical_pg_stat_replication:
  query: |
    SELECT
      pid,
      application_name,
      EXTRACT(EPOCH FROM backend_start) AS backend_start,
      state,
      sent_lsn - '0/0'::pg_lsn AS sent_lsn_numeric,
      write_lsn - '0/0'::pg_lsn AS write_lsn_numeric,
      flush_lsn - '0/0'::pg_lsn AS flush_lsn_numeric,
      replay_lsn - '0/0'::pg_lsn AS replay_lsn_numeric,
      COALESCE(EXTRACT(EPOCH FROM write_lag), 0) AS write_lag,
      COALESCE(EXTRACT(EPOCH FROM flush_lag), 0) AS flush_lag,
      COALESCE(EXTRACT(EPOCH FROM replay_lag), 0) AS replay_lag
    FROM pg_stat_replication
  metrics:
    - pid:
        usage: "LABEL"
        description: "Process ID of a WAL sender process"
    - application_name:
        usage: "LABEL"
        description: "Name of the application that is connected to this WAL sender"
    - backend_start:
        usage: "COUNTER"
        description: "Time when client connected to WAL sender"
    - state:
        usage: "LABEL"
        description: "Current WAL sender state"
    - sent_lsn_numeric:
        usage: "COUNTER"
        description: "Last write-ahead log location sent on this connection (as number)"
    - write_lsn_numeric:
        usage: "COUNTER"
        description: "Last write-ahead log location written to disk by this standby server (as number)"
    - flush_lsn_numeric:
        usage: "COUNTER"
        description: "Last write-ahead log location flushed to disk by this standby server (as number)"
    - replay_lsn_numeric:
        usage: "COUNTER"
        description: "Last write-ahead log location replayed into the database on this standby server (as number)"
    - write_lag:
        usage: "GAUGE"
        description: "Time elapsed between flushing recent WAL locally and receiving notification that this standby server has written it"
    - flush_lag:
        usage: "GAUGE"
        description: "Time elapsed between flushing recent WAL locally and receiving notification that this standby server has written and flushed it"
    - replay_lag:
        usage: "GAUGE"
        description: "Time elapsed between flushing recent WAL locally and receiving notification that this standby server has written, flushed and applied it"

pglogical_pg_replication_slots:
  query: |
    SELECT
      pg_replication_slots.slot_name,
      pg_replication_slots.database,
      pg_replication_slots.active,
      pg_replication_slots.active_pid AS pid,
      pg_replication_slots.confirmed_flush_lsn - '0/0'::pg_lsn AS confirmed_flush_lsn_numeric,
      pg_stat_replication.application_name
    FROM pg_replication_slots
    INNER JOIN pg_stat_replication ON pg_replication_slots.active_pid = pg_stat_replication.pid
  metrics:
    - slot_name:
        usage: "LABEL"
        description: "A unique, cluster-wide identifier for the replication slot"
    - database:
        usage: "LABEL"
        description: "The name of the database this slot is associated with, or null"
    - active:
        usage: "COUNTER"
        description: "True if this slot is currently actively being used"
    - active_pid:
        usage: "LABEL"
        description: "The process ID of the session using this slot if the slot is currently actively being used"
    - confirmed_flush_lsn_numeric:
        usage: "COUNTER"
        description: "The address (LSN) up to which the logical slotâ€™s consumer has confirmed receiving data (as number)"
    - application_name:
        usage: "LABEL"
        description: "Name of the application that is connected to this WAL sender"

pglogical_queue:
  query: |
    SELECT
      EXTRACT(EPOCH FROM queued_at) AS queued_at,
      role,
      replication_sets,
      CASE
        WHEN message_type = 'Q' THEN 'QUEUE_COMMAND_TYPE_SQL'
        WHEN message_type = 'T' THEN 'QUEUE_COMMAND_TYPE_TRUNCATE'
        WHEN message_type = 'A' THEN 'QUEUE_COMMAND_TYPE_TABLESYNC'
        WHEN message_type = 'S' THEN 'QUEUE_COMMAND_TYPE_SEQUENCE'
        ELSE 'UNKNOWN'
      END as message_type,
      ROW_NUMBER() OVER(ORDER BY queued_at) AS row_number
    FROM pglogical.queue
  metrics:
    - queued_at:
        usage: "LABEL"
        description: "Time at which command was queued"
    - role:
        usage: "LABEL"
        description: "Role used for queued command"
    - replication_sets:
        usage: "LABEL"
        description: "Replication sets used for queued command"
    - message_type:
        usage: "LABEL"
        description: "Type of queued command"
    - row_number:
        usage: "COUNTER"
        description: "Artifically created index number of queued command"

pglogical_local_sync_status:
  query: |
    SELECT
      pglogical.subscription.sub_id,
      pglogical.subscription.sub_origin,
      n1.node_name AS sub_origin_node_name,
      pglogical.subscription.sub_target,
      n2.node_name AS sub_target_node_name,
      pglogical.subscription.sub_enabled,
      pglogical.subscription.sub_slot_name,
      pglogical.subscription.sub_replication_sets,
      CASE
        WHEN sync_kind = 'i' THEN 'SYNC_KIND_INIT'
        WHEN sync_kind = 'f' THEN 'SYNC_KIND_FULL'
        WHEN sync_kind = 's' THEN 'SYNC_KIND_STRUCTURE'
        WHEN sync_kind = 'd' THEN 'SYNC_KIND_DATA'
        ELSE 'UNKNOWN'
      END AS sync_kind,
      sync_nspname,
      sync_relname,
      CASE
        WHEN sync_status = '\0' THEN 'SYNC_STATUS_NONE'
        WHEN sync_status = 'i' THEN 'SYNC_STATUS_INIT'
        WHEN sync_status = 's' THEN 'SYNC_STATUS_STRUCTURE'
        WHEN sync_status = 'd' THEN 'SYNC_STATUS_DATA'
        WHEN sync_status = 'c' THEN 'SYNC_STATUS_CONSTRAINTS'
        WHEN sync_status = 'w' THEN 'SYNC_STATUS_SYNCWAIT'
        WHEN sync_status = 'u' THEN 'SYNC_STATUS_CATCHUP'
        WHEN sync_status = 'y' THEN 'SYNC_STATUS_SYNCDONE'
        WHEN sync_status = 'r' THEN 'SYNC_STATUS_READY'
        ELSE 'UNKNOWN'
      END AS sync_status,
      sync_statuslsn AS sync_status_lsn,
      sync_statuslsn - '0/0'::pg_lsn AS sync_status_lsn_numeric
    FROM pglogical.local_sync_status
    INNER JOIN pglogical.subscription
      ON pglogical.local_sync_status.sync_subid = pglogical.subscription.sub_id
    INNER JOIN pglogical.node n1
      ON pglogical.subscription.sub_origin = n1.node_id
    INNER JOIN pglogical.node n2
      ON pglogical.subscription.sub_target = n2.node_id
    WHERE sync_nspname IS NOT NULL AND sync_relname IS NOT NULL
  metrics:
    - sub_id:
        usage: "LABEL"
        description: "ID of subscription"
    - sub_origin:
        usage: "LABEL"
        description: "Node ID of subscription source"
    - sub_origin_node_name:
        usage: "LABEL"
        description: "Node name of subscription source"
    - sub_target:
        usage: "LABEL"
        description: "Node ID of subscription target"
    - sub_target_node_name:
        usage: "LABEL"
        description: "Node name of subscription target"
    - sub_enabled:
        usage: "LABEL"
        description: "True if this subscription is currently enabled"
    - sub_slot_name:
        usage: "LABEL"
        description: "Slot name used by subscription"
    - sub_replication_sets:
        usage: "LABEL"
        description: "Replication sets attached to subscription"
    - sync_kind:
        usage: "LABEL"
        description: "Kind of synchronization"
    - sync_nspname:
        usage: "LABEL"
        description: "Schema synchronization is related to"
    - sync_relname:
        usage: "LABEL"
        description: "Table synchronization is related to"
    - sync_status:
        usage: "LABEL"
        description: "Status of synchronization"
    - sync_status_lsn:
        usage: "LABEL"
        description: "Status LSN of synchronization"
    - sync_status_lsn_numeric:
        usage: "COUNTER"
        description: "Status LSN of synchronization (as number)"

pglogical_subscription_status:
  query: |
    SELECT
      subscription_name,
      status,
      provider_node,
      slot_name,
      replication_sets,
      ROW_NUMBER() OVER(ORDER BY subscription_name) AS row_number
    FROM pglogical.show_subscription_status()
  metrics:
    - subscription_name:
        usage: "LABEL"
        description: "Name of subscription"
    - status:
        usage: "LABEL"
        description: "Status of subscription"
    - provider_node:
        usage: "LABEL"
        description: "Provider node of subscription"
    - slot_name:
        usage: "LABEL"
        description: "Slot name of subscription"
    - replication_sets:
        usage: "LABEL"
        description: "Replication sets of subscription"
    - row_number:
        usage: "COUNTER"
        description: "Artifically created index number of queued command"
